"""

 * Advanced Encryption Standard
 * Based on the document FIPS PUB 197
 * @2021.12.17
 
"""


# NOTE: This function can be easily replaced with a look up table for a speed 
#       boost, at the expense of an increase in memory size (around 65 KB). See
#       the aes.h header file to find the macro definition.


def mul_polynomial(x, y):
    if x == 0 or y == 0:
        return 0
    z = 0
    while x != 0:
        #x의 제일 마지막 비트가 1이면 addition(XOR)
        if x & 1 == 1:
            z ^= y 
        y <<= 1
        x >>= 1
        
    return z

def bit_len(x):
    return (len(bin(x))-2)

def mod_polynomial(x, m):
    bit_m = bit_len(m)
    while True:
        bit_x = bit_len(x)
        if bit_x < bit_m:
            break
        mshift = m << (bit_x - bit_m)
        x ^= mshift
    return x
    
def aes_gmult(x, y):
    # m(x) = x^8 + x^4 + x^3 + x + 1 
    # m = (100011011)_2 = (283)_10
    return mod_polynomial(mul_polynomial(x, y), 283)

def mul_inverse(x):
    if x == 0:
        return 0
    for i in range(1, 256):
        if aes_gmult(x, i) == 1:
            return i

def affine_trans(x):
    affine = [248, 124, 62, 31, 143, 199, 227, 241]
    y = ''

    for i in range(8):
        y += str(bin(x&affine[i]).count('1') % 2)
    
    y = int(y, 2) ^ int('01100011', 2)

    return y

def inv_affine_trans(x):
    inv_affine = [82, 41, 148, 74, 37, 146, 73, 164]
    y = ''

    for i in range(8):
        y += str(bin(x&inv_affine[i]).count('1') % 2)

    y = int(y, 2) ^ int('00000101', 2)

    return y

def sub_bytes(x):
    return affine_trans(mul_inverse(x))

# Addition of 4 byte words
def coef_add(a, b):
    d = list(range(4))
    d[0] = a[0]^b[0]
    d[1] = a[1]^b[1]
    d[2] = a[2]^b[2]
    d[3] = a[3]^b[3]
    return d
    
# Multiplication of 4 byte words
def coef_mult(a, b, d):
    d[0] = gmult(a[0],b[0])^gmult(a[3],b[1])^gmult(a[2],b[2])^gmult(a[1],b[3])
    d[1] = gmult(a[1],b[0])^gmult(a[0],b[1])^gmult(a[3],b[2])^gmult(a[2],b[3])
    d[2] = gmult(a[2],b[0])^gmult(a[1],b[1])^gmult(a[0],b[2])^gmult(a[3],b[3])
    d[3] = gmult(a[3],b[0])^gmult(a[2],b[1])^gmult(a[1],b[2])^gmult(a[0],b[3])
    return d
 
K = 0
Nb = 4
Nk = 0
Nr = 0

def aes_init(size):
    global Nk
    global Nr
    if size == 16:    
        Nk = 4
        Nr = 10
    elif size == 24:
        Nk = 6
        Nr = 12
    else:                       #size == 32
        Nk = 8
        Nr = 14
    return Nb*(Nr+1)*4

s_box = [
    #  0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, # 0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, # 1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, # 2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, # 3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, # 4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, # 5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, # 6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, # 7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, # 8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, # 9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, # a
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, # b
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, # c
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, # d
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, # e
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] # f

inv_s_box = [
    #  0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, # 0
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, # 1
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, # 2
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, # 3
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, # 4
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, # 5
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, # 6
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, # 7
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, # 8
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, # 9
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, # a
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, # b
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, # c
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, # d
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, # e
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d] # f

R = [0x02, 0x00, 0x00, 0x00]

def Rcon(i):
    global R
    if i == 1:
        R[0] = 0x01         # x^(1-1) = x^0 = 1
    elif i > 1:
        R[0] = 0x02
        i -= 1
        while i>1:
            R[0] = gmult(R[0], 0x02)
            i -= 1
    return R

def add_round_key(state, w, r):
    for c in range(Nb):
        state[Nb*0+c] = state[Nb*0+c]^w[4*Nb*r+4*c+0]   
        state[Nb*1+c] = state[Nb*1+c]^w[4*Nb*r+4*c+1]
        state[Nb*2+c] = state[Nb*2+c]^w[4*Nb*r+4*c+2]
        state[Nb*3+c] = state[Nb*3+c]^w[4*Nb*r+4*c+3]
    return state

def mix_columns(state):
    a = [0x02, 0x01, 0x01, 0x03]
    col = list(range(4))
    res = list(range(4))
    
    for j in range(Nb):
        for i in range(4):
            col[i] = state[Nb*i+j]
            
        coef_mult(a, col, res)
        
        for i in range(4):
            state[Nb*i+j] = res[i]
    
    return state

def inv_mix_columns(state):
    a = [0x0e, 0x09, 0x0d, 0x0b]
    col = list(range(4))
    res = list(range(4))
    
    for j in range(Nb):
        for i in range(4):
            col[i] = state[Nb*i+j]
            
        coef_mult(a, col, res)
        
        for i in range(4):
            state[Nb*i+j] = res[i]
    
    return state
            
def shift_rows(state):
    for i in range(1, 4):
        s = 0
        while s < i:
            tmp = state[Nb*i+0]
            
            for k in range(1, Nb):
                state[Nb*i+k-1] = state[Nb*i+k]
            
            state[Nb*i+Nb-1] = tmp
            s += 1
    
    return state

def inv_shift_rows(state):
    for i in range(1, 4):
        s = 0
        while s < i:
            tmp = state[Nb*i+Nb-1]
            
            for k in range(Nb-1, 0, -1):
                state[Nb*i+k] = state[Nb*i+k-1]
            
            state[Nb*i+0] = tmp
            s += 1
    
    return state

def sub_bytes(state):
    for i in range(4):
        for j in range(Nb):
            state[Nb*i+j] = s_box[state[Nb*i+j]]
    return state

def inv_sub_bytes(state):
    for i in range(4):
        for j in range(Nb):
            state[Nb*i+j] = inv_s_box[state[Nb*i+j]]
    return state

def sub_word(w):
    for i in range(4):
        w[i] = s_box[w[i]]
    return w

def rot_word(w):
    tmp = w[0]
    
    for i in range(3):
        w[i] = w[i+1]
        
    w[3] = tmp
    
    return w

def aes_key_expansion(key, w):
    tmp = list(range(4))
    k_len = Nb*(Nr+1)
    
    for i in range(Nk):
        w[4*i+0] = key[4*i+0]
        w[4*i+1] = key[4*i+1]
        w[4*i+2] = key[4*i+2]
        w[4*i+3] = key[4*i+3]
    for i in range(Nk, k_len):
        tmp[0] = w[4*(i-1)+0]
        tmp[1] = w[4*(i-1)+1]
        tmp[2] = w[4*(i-1)+2]
        tmp[3] = w[4*(i-1)+3]
        
        if (i%Nk == 0):
            tmp = rot_word(tmp)
            tmp = sub_word(tmp)
            tmp = coef_add(tmp, Rcon(i/Nk))
        elif((Nk>6)and(i%Nk==4)):
            tmp = sub_word(tmp)
            
        w[4*i+0] = w[4*(i-Nk)+0]^tmp[0]
        w[4*i+1] = w[4*(i-Nk)+1]^tmp[1]
        w[4*i+2] = w[4*(i-Nk)+2]^tmp[2]
        w[4*i+3] = w[4*(i-Nk)+3]^tmp[3]    
      
    return w

def aes_cipher(input, output, w):
    state = list(range(4*Nb))
    
    for i in range(4):
        for j in range(Nb):
            state[Nb*i+j] = input[i+4*j]
    
    state = add_round_key(state, w, 0)
    
    for r in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, w, r)

    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, w, Nr)

    for i in range(4):
        for j in range(Nb):
            output[i+4*j] = state[Nb*i+j]
    
    return output

def aes_inv_cipher(input, output, w):
    state = list(range(4*Nb))
    
    for i in range(4):
        for j in range(Nb):
            state[Nb*i+j] = input[i+4*j]
            
    state = add_round_key(state, w, Nr)
    
    for r in range(Nr-1, 0, -1):
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
        state = add_round_key(state, w, r)
        state = inv_mix_columns(state)
        
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    state = add_round_key(state, w, 0)
    
    for i in range(4):
        for j in range(Nb):
            output[i+4*j] = state[Nb*i+j]
    return output

# main
	 
# 128 bits 
#'''
key = [
    0x2b, 0x7e, 0x15, 0x16,
    0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88,
    0x09, 0xcf, 0x4f, 0x3c]
#'''
	
# 192 bits 
'''
key = [
    0x8e, 0x73, 0xb0, 0xf7,
    0xda, 0x0e, 0x64, 0x52,
    0xc8, 0x10, 0xf3, 0x2b,
    0x80, 0x90, 0x79, 0xe5,
    0x62, 0xf8, 0xea, 0xd2,
    0x52, 0x2c, 0x6b, 0x7b]
'''

#  256 bits 
'''
key = [
    0x60, 0x3d, 0xeb, 0x10,
    0x15, 0xca, 0x71, 0xbe,
    0x2b, 0x73, 0xae, 0xf0,
    0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07,
    0x3b, 0x61, 0x08, 0xd7,
    0x2d, 0x98, 0x10, 0xa3,
    0x09, 0x14, 0xdf, 0xf4]
'''

#'''	
aes_in = [
    0x32, 0x43, 0xf6, 0xa8,
    0x88, 0x5a, 0x30, 0x8d,
    0x31, 0x31, 0x98, 0xa2,
    0xe0, 0x37, 0x07, 0x34]    # 128
#'''

# 128-bit key
""" 
key = [ 0x00, 0x01, 0x02, 0x03, 
    	0x04, 0x05, 0x06, 0x07, 
		0x08, 0x09, 0x0a, 0x0b, 
		0x0c, 0x0d, 0x0e, 0x0f] 
"""

# 192-bit key
"""
key = [ 0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13,
		0x14, 0x15, 0x16, 0x17]
"""

# 256-bit key
'''
key = [ 0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13,
		0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b,
		0x1c, 0x1d, 0x1e, 0x1f]
'''
'''
aes_in = [ 0x00, 0x11, 0x22, 0x33,
		0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb,
		0xcc, 0xdd, 0xee, 0xff]
'''
aes_out = list(range(16)) 

aes_init(len(key))
w = list(range(Nb*(Nr+1)*4))
w = aes_key_expansion(key, w)

print("Plaintest message: ")
for i in range(4):
    print("{0:02x} {1:02x} {2:02x} {3:02x}".format(aes_in[4*i+0], aes_in[4*i+1], aes_in[4*i+2], aes_in[4*i+3]), end=' ')
print('\n')

aes_out = aes_cipher(aes_in, aes_out, w)

print("Ciphered message: ")
for i in range(4):
    print("{0:02x} {1:02x} {2:02x} {3:02x}".format(aes_out[4*i+0], aes_out[4*i+1], aes_out[4*i+2], aes_out[4*i+3]), end=' ')
print('\n')

aes_in = aes_inv_cipher(aes_out, aes_in, w)

print("Original message (after inv cipher): ")
for i in range(4):
    print("{0:02x} {1:02x} {2:02x} {3:02x}".format(aes_in[4*i+0], aes_in[4*i+1], aes_in[4*i+2], aes_out[4*i+3]), end=' ')
print('\n')
